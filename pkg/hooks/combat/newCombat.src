use uo;
use os;
use basic;
use cfgfile;

include ":attributes:attributes";


program newcombat()
  Print( "Using NewCombatAdvancement..." );
  return 1;
endprogram

exported function NewCombatAdvancement(attacker, weapon, defender)
  var attribid;
  var cfg;
  if(attacker.npctemplate)
    cfg := ReadConfigFile(":*:npcdesc");
    attribid := cfg[attacker.npctemplate].AttackAttribute;
	broadcast("NPC attrib: " + attribid);

  else
    cfg := ReadConfigFile(":*:itemdesc");
    attribid := cfg[Hex(weapon.objtype)].Attribute;
	broadcast("Weapon attrib: " + attribid);
  endif
  if(!attribid)
    return;
  endif
	//SkillCheck(attacker, AP_GetSkill(attacker, attribid), -1, -3, 3);
	SkillCheck(attacker, attribid, -1, -3, 3);
	SkillCheck(attacker, TACTICS, -1, -3, 3);
	SkillCheck(defender, TACTICS, -1, -3, 3);
/*  var skillid := FindSkillidByIdentifier(attribid);
  AwardPoints(attacker, skillid, 15);
  AwardPoints(attacker, AP_AttributeNameToSkillId(TACTICS), 7);
  AwardPoints(defender, AP_AttributeNameToSkillId(TACTICS), 7);*/
endfunction

function FindSkillidByIdentifier(attribid)
  var retval;
  case(attribid)
    "Wrestling": retval := AP_AttributeNameToSkillId(WRESTLING);
    "Fencing":   retval := AP_AttributeNameToSkillId(FENCING);
    "Swordsmanship":    retval := AP_AttributeNameToSkillId(SWORDSMANSHIP);
    "Macefighting":      retval := AP_AttributeNameToSkillId(MACEFIGHTING);
    "Archery":    retval := AP_AttributeNameToSkillId(ARCHERY);
  endcase
  Return retval;
endfunction